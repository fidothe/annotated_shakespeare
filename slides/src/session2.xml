<?dbhtml pygments="true"?>
<slides xml:lang="en" xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>Practical Web Applications</title>
    <subtitle>Session Two</subtitle>
    <!-- authors are alphabetical by first name (I get sick of being listed last all the time, 
so I always do this if I can) -->
    <authorgroup>
      <author>
        <personname>
          <firstname>Lauren</firstname>
          <surname>Wood</surname>
        </personname>
        <affiliation>
          <orgname>Textuality Services, Inc.</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Matt</firstname>
          <surname>Patterson</surname>
        </personname>
        <affiliation>
          <orgname>Constituent Parts, Ltd.</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Norman </firstname>
          <surname>Walsh</surname>
        </personname>
        <affiliation>
          <orgname>MarkLogic</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Paul</firstname>
          <surname>Downey</surname>
        </personname>
        <affiliation>
          <orgname>GDS</orgname>
        </affiliation>
      </author>
    </authorgroup>
    <releaseinfo role="version">Version 1.0</releaseinfo>
    <legalnotice>
      <para>Alpha by first name</para>
    </legalnotice>
    <pubdate>2012-09-20</pubdate>
    <copyright>
      <year>2012</year>
      <holder>Lauren Wood, Matt Patterson, Norm Walsh, Paul Downey</holder>
    </copyright>
  </info>
  <foilgroup>
    <title>Architecture</title>
    <foil>
      <title>HTTP versus REST</title>
      <mediaobject>
        <alt>Fielding has a posse</alt>
        <imageobject>
          <imagedata fileref="../images/posse.jpg" />
        </imageobject>
      </mediaobject>
    </foil>
    <foil>
      <title>HTTP RFC 2616</title>
      <mediaobject>
        <alt>RFC 2616</alt>
        <imageobject>
          <imagedata fileref="../images/rfc2616.png" />
        </imageobject>
      </mediaobject>
    </foil>
    <foil>
      <title>REST Cookbook</title>
      <mediaobject>
        <alt>REST Cookbook</alt>
        <imageobject>
          <imagedata fileref="../images/cookbook.jpg" />
        </imageobject>
      </mediaobject>
    </foil>
    <foil>
      <title>HTTP Verbs</title>
      <programlisting role="wide">
method     safe    idempotent   semantics    resource     cacheable
          -----------------------------------------------------------
GET       |  X          X            X           X             X    |
HEAD      |  X          X            X           X             X    |
PUT       |             X            X           X                  |
POST      |                                                    *    |
DELETE    |             X            X           X                  |
OPTIONS   |  X          X            X                              |
          -----------------------------------------------------------
PROPFIND  |  X          X            X           X             *    |
PROPPATCH |             X            X           X                  |
MKCOL     |             *            X           X                  |
COPY      |             X            X           X                  |
MOVE      |             ?            X           X                  |
LOCK      |                          X           X                  |
UNLOCK    |             X            X           X                  |
PATCH     |             *            X           X                  |
          -----------------------------------------------------------
      </programlisting>
    </foil>
    <foil>
      <title>Verbs in URLs make Roy cry</title>
      <itemizedlist>
        <listitem>
          <para><code>/getCustomerProfile</code></para>
        </listitem>
        <listitem>
          <para><code>/deleteTheArticle</code></para>
        </listitem>
        <listitem>
          <para><code>/fireNuclearMissiles</code></para>
        </listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>URLs are nouns!</title>
      <itemizedlist>
        <listitem>
          <para><code>/cities</code></para>
        </listitem>
        <listitem>
          <para><code>/cities/London</code></para>
          <para><code>/cities/Paris</code></para>
          <para><code>/cities/Moscow</code></para>
        </listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>GET</title>
      <programlisting language="http"><![CDATA[
http://www.flickr.com/search?q=dog&w=commons&m=text
]]></programlisting>
      <programlisting language="http"><![CDATA[
GET /search?q=dog&w=commons&m=text
Host: http://www.flickr.com
]]></programlisting>
    </foil>
    <foil>
      <title>HEAD</title>
      <para>same as GET, but no content returned ..</para>
    </foil>
    <foil>
      <title>POST</title>
      <para>Talk to an agent</para>
      <programlisting language="http"><![CDATA[
POST /box-office
Host: http://www.flickr.com
Content-Type: application/x-www-form-urlencoded

date=20120912&performance=evening&number=4
]]></programlisting>
    </foil>
    <foil>
      <title>PUT</title>
      <para>Replace the content</para>
      <programlisting language="http"><![CDATA[
PUT /box-office
Host: http://www.flickr.com
Content-Type: application/x-www-form-urlencoded

date=20120912&performance=evening&number=4
]]></programlisting>
    </foil>
    <foil>
      <title>DELETE</title>
      <para>Delete the resource</para>
      <programlisting language="http"><![CDATA[
DELETE /box-office
Host: http://www.flickr.com
]]></programlisting>
    </foil>
    <foil>
      <title>Caching (Dates)</title>
      <programlisting language="http"><![CDATA[
If-Modified-Since:  Friday, 31-Dec-11 23:59:59 GMT
]]></programlisting>
      <programlisting language="http"><![CDATA[
HTTP/1.1 304 Not Modified
]]></programlisting>
    </foil>
    <foil>
      <title>Caching (Content)</title>
      <programlisting language="http"><![CDATA[
ETag: "686897696a7c876b7e"
]]></programlisting>
      <programlisting language="http"><![CDATA[
If-None-Match: "686897696a7c876b7e"
]]></programlisting>
      <programlisting language="http"><![CDATA[
HTTP/1.1 304 Not Modified
]]></programlisting>
    </foil>
    <foil>
      <title>HTTP Verbs</title>
      <programlisting role="wide">
method     safe    idempotent   semantics    resource     cacheable
          -----------------------------------------------------------
GET       |  X          X            X           X             X    |
HEAD      |  X          X            X           X             X    |
PUT       |             X            X           X                  |
POST      |                                                    *    |
DELETE    |             X            X           X                  |
OPTIONS   |  X          X            X                              |
          -----------------------------------------------------------
PROPFIND  |  X          X            X           X             *    |
PROPPATCH |             X            X           X                  |
MKCOL     |             *            X           X                  |
COPY      |             X            X           X                  |
MOVE      |             ?            X           X                  |
LOCK      |                          X           X                  |
UNLOCK    |             X            X           X                  |
PATCH     |             *            X           X                  |
          -----------------------------------------------------------
      </programlisting>
    </foil>
    <foil>
      <title>Representations</title>
      <para>The type of content is returned as a media-type</para>
      <programlisting language="http"><![CDATA[
      http://progressiveenhancement.net/
]]></programlisting>
    </foil>
    <foil>
      <title>Content Negotiation</title>
      <programlisting language="http"><![CDATA[
Accept: */*
]]></programlisting>
      <programlisting language="http"><![CDATA[
Accept-Language: de; q=1.0, en; q=0.5
Accept: text/html; q=1.0, text/*; q=0.8, image/gif; q=0.6, image/jpeg; q=0.6, image/*; q=0.5, */*; q=0.1
]]></programlisting>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Modelling Plays for our app</title>
    <foil>
      <title>What's in a play?</title>
      <para>Let's consider what the most basic parts of the play are:</para>
      <itemizedlist>
        <listitem>
          <para>The title of the play</para>
        </listitem>
        <listitem>
          <para>Who wrote it</para>
        </listitem>
        <listitem>
          <para>How it's broken up into acts and scenes</para>
        </listitem>
        <listitem>
          <para>Characters</para>
        </listitem>
        <listitem>
          <para>The text itself</para>
        </listitem>
      </itemizedlist>
      <para>What does the data we have make easier for us?</para>
      <speakernotes>
        <para>Before we begin just blindly throwing things around, we should stop and consider
          what data we actually have to hand, how it's structured, what we want from it, and
          how easy it is to get things out of it.</para>
        <para>The play XML gives us some things twice, like the title and author. We need to
          pick one, but it's pretty clear what they are.</para>
        <para>The structure of the play is less clear, because the markup is primarily aimed
          at preserving the printed characteristics of the manuscript. If we look closely
          we can see that although there are no explicit 'Act' or 'Scene' elements the &lt;head&gt;
          element is only used to mark the title of the play (its third appearance) and 
          what look like Act or Scene titles.</para>
        <para>Characters are called out, but just as strings: not with ID refs or anything 
          unambiguous. For ease, I think we'll have to ignore those.</para>
        <para>The XML contains element and text content for all the various bits of metadata 
          and elizabethan typesetting notes, but the play's text is unambigously within the
          &lt;text&gt; element, and the metadata's all outside that, so that's alright.</para>
      </speakernotes>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Designing the URLs</title>
    <foil>
      <title>What resources are there?</title>
      <para>At first glance</para>
      <itemizedlist>
        <listitem>
          <para>Play</para>
        </listitem>
        <listitem>
          <para>Act</para>
        </listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>How should they be exposed?</title>
      <para>We actually need more than we thought</para>
      <itemizedlist>
        <listitem>
          <para>A list of all Plays</para>
        </listitem>
        <listitem>
          <para>An individual Play</para>
        </listitem>
        <listitem>
          <para>An Act of a Play</para>
        </listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>The URLs</title>
      <itemizedlist>
        <listitem>
          <para><code>/</code></para>
        </listitem>
        <listitem>
          <para><code>/plays/caesar</code></para>
        </listitem>
        <listitem>
          <para><code>/plays/caesar/act/1</code></para>
        </listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>Routing in Sinatra</title>
      <programlisting language="ruby"><xi:include href="ex/base_routes.rb" parse="text"/></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
      <speakernotes>
        <para>Sinatra uses methods named for HTTP methods to declare routes.</para>
        <para>These are all GET routes. The <code>:param_name</code> sections in the URL 
          patterns are placeholders for variable parts of the URL, e.g. <code>/plays/caesar</code>
          or <code>/plays/hamlet</code> will both match <code>get "/plays/:id"</code>, and
          <code>caesar</code> or <code>hamlet</code> will be accessible as a parameter named
          <code>:id</code>.</para>
      </speakernotes>
    </foil>
    <foil>
      <title>Holes in the URI space</title>
      <para>With the holes that leaves in the URL space, we probably also need:</para>
      <itemizedlist>
        <listitem>
          <para><code>/plays</code></para>
        </listitem>
        <listitem>
          <para><code>/plays/:id/act</code></para>
        </listitem>
      </itemizedlist>
      <speakernotes>
        <para>Before we add these extra routes in, it's worth trying out the first set.</para>
        <para>If you were to put the URL <code>/plays/caesar/act/1</code> in to your browser
          and start to hack off chunks of the URL then you'll see 404s at
          <code>/plays/caesar/act</code> and <code>/plays</code>.</para>
        <para>These extra routes avoid that by redirecting the browser to the next level up</para>
      </speakernotes>
    </foil>
    <foil>
      <title>Routing in Sinatra</title>
      <programlisting language="ruby"><xi:include href="ex/routes_plus_redirects.rb" parse="text"/></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
    </foil>
    <foil>
      <title>Populating those views</title>
      <para>Let's put some static data into <code>annotated_shakespeare.rb</code> and wire up some basic views so we can see the basic moving parts in motion.</para>
      <programlisting language="ruby"><![CDATA[
# encoding: utf-8
require 'sinatra/base'
ROOT_DIR = File.expand_path('../../', __FILE__)
class AnnotatedShakespeare < Sinatra::Base
  set :views, File.expand_path('views', ROOT_DIR)
  set :public_folder, File.expand_path('public', ROOT_DIR)

  get '/' do
    @title = "Plays of William Shakespeare"
    @plays = {'julius' => 'Julius Caesar', 
              'richard' => 'Richard II'}
    erb :index
  end
  ...
end
]]></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
    </foil>
    <foil>
      <title>Populating those views</title>
      <programlisting language="html+erb"><![CDATA[
<h1><%= @title %></h1>
<ul>
  <% @plays.each do |url_slug, title| %>
    <li><a href="<%= url("/plays/#{url_slug}") %>">
      <%= title %></a>
    </li>
  <% end %>
</ul>
]]></programlisting>
      <para><code>views/index.erb</code></para>
    </foil>
    <foil>
      <title>Populating those views</title>
      <programlisting language="ruby"><![CDATA[
class AnnotatedShakespeare < Sinatra::Base
  get '/plays/:id' do
    plays = {'julius' => 'Julius Caesar',
             'richard' => 'Richard II'}
    @play = plays[params[:id]]
    @title = @play
    @url_slug = params[:id]
    erb :play_index
  end
end
]]></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
      <programlisting language="html+erb"><![CDATA[
<h1><%= @play %></h1>
<p>
  <a href="<%= url("/plays/#{@url_slug}/act/1") %>">
    Act 1
  </a>
</p>
]]></programlisting>
      <para><code>views/play_index.erb</code></para>
    </foil>
    <foil>
      <title>Populating those views</title>
      <programlisting language="ruby"><![CDATA[
class AnnotatedShakespeare < Sinatra::Base
  get '/plays/:id/act/:act_number' do
    plays = {'julius' => 'Julius Caesar', 
             'richard' => 'Richard II'}
    @play = plays[params[:id]]
    @act = params[:act_number]
    erb :show
  end
end
]]></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
      <programlisting language="html+erb"><![CDATA[
<h1><%= @play %>, Act <%= @act %></h1>
]]></programlisting>
      <para><code>views/play_index.erb</code></para>
    </foil>
  </foilgroup>
</slides>
