<?dbhtml pygments="true"?>
<slides xml:lang="en" xmlns="http://docbook.org/ns/docbook"
        xmlns:h="http://www.w3.org/1999/xhtml"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>Practical Web Applications</title>
    <subtitle>Session Six</subtitle>
    <!-- authors are alphabetical by first name (I get sick of being listed last all the time, 
so I always do this if I can) -->
    <authorgroup>
      <author>
        <personname>
          <firstname>Lauren</firstname>
          <surname>Wood</surname>
        </personname>
        <affiliation>
          <orgname>Textuality Services, Inc.</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Matt</firstname>
          <surname>Patterson</surname>
        </personname>
        <affiliation>
          <orgname>Constituent Parts, Ltd.</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Norman </firstname>
          <surname>Walsh</surname>
        </personname>
        <affiliation>
          <orgname>MarkLogic</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Paul</firstname>
          <surname>Downey</surname>
        </personname>
        <affiliation>
          <orgname>GDS</orgname>
        </affiliation>
      </author>
    </authorgroup>
    <releaseinfo role="version">Version 1.0</releaseinfo>
    <legalnotice>
      <para>Alpha by first name</para>
    </legalnotice>
    <pubdate>2012-09-20</pubdate>
    <copyright>
      <year>2012</year>
      <holder>Lauren Wood, Matt Patterson, Norm Walsh, Paul Downey</holder>
    </copyright>
  <h:script type="text/javascript" src="js/javascript-js.js"/>
  <h:script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"/>
  <h:script type="text/javascript" src="js/html-geoloc.js"/>
    <h:link rel="stylesheet" type="text/css" href="css/html-css.css" />
    <h:link rel="stylesheet" type="text/css" href="css/pygments.css" />
    <h:meta name="timer" content="true"/>
    <h:meta name="countdown" content="180:00"/>
  </info>
<foilgroup>
<title>Cascading Style Sheets (CSS)</title>

<foil>
<title>Cascading Style Sheets</title>
<para>Associating style with elements:</para>

<programlisting language="css">code.red {
  background-color: #FFAAAA;
}</programlisting>

<para>This means <code role="red">&lt;code class="red"&gt;</code> has a red background color.</para>
</foil>

<foil>
<title>Cascading Style Sheets</title>
<para>Associating style with elements:</para>

<para>And also something more complex:</para>

<programlisting language="css">span.ex > span:nth-child(2):before {
  content: " [ ";
  background-color: #AAFFAA;
}
span.ex > span:nth-child(2):after {
  content: " ] ";
  background-color: #AAFFAA;
}</programlisting>

<programlisting language="xml"><![CDATA[<span class="ex"><span>first</span>,
<span>second</span>,<span>third</span>
</span>]]></programlisting>

<para>renders like this:
<phrase role="ex"><phrase>first</phrase>,<phrase>second</phrase>,<phrase>third</phrase></phrase>
</para>
</foil>

<foil>
<title>Adding CSS to HTML</title>
<para>There are two ways to add CSS to an HTML page:</para>
<itemizedlist>
<listitem>
<para>Inline:</para>
<programlisting language="xml"><![CDATA[<style type="text/css">
code.red {
  background-color: #FFAAAA;
}]]></programlisting>
</listitem>
<listitem>
<para>With a link:</para>
<programlisting language="xml"><![CDATA[<link rel="stylesheet" type="text/css"
      href="css/webtech.css" />]]></programlisting>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>CSS Selectors</title>
<variablelist>
<varlistentry><term><literal>E</literal></term>
<listitem>
<para>An “<tag>E</tag>” element</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>.cl</literal></term>
<listitem>
<para>Any element with a “<tag class="attribute">class</tag>” attribute that
includes the class “<literal>cl</literal>”.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>.cl1.cl2</literal></term>
<listitem>
<para>Any element with a “<tag class="attribute">class</tag>” attribute that
includes the class “<literal>cl1</literal>” and “<literal>cl2</literal>”.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>#id</literal></term>
<listitem>
<para>Any element with an ID value of “id”.</para>
</listitem>
</varlistentry>
</variablelist>
</foil>

<foil>
<title>CSS Selectors (continued)</title>
<variablelist>
<varlistentry><term><literal>E.cl</literal></term>
<listitem>
<para>An “<tag>E</tag>” element with a “<tag class="attribute">class</tag>” attribute that
includes the class “<literal>cl</literal>”.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>E#id</literal></term>
<listitem>
<para>An “<tag>E</tag>” element with the ID “<literal>id</literal>”</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>A E</literal></term>
<listitem>
<para>An “<tag>E</tag>” element that is a descendant of some ancestor “<tag>A</tag>”</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>P &gt; E</literal></term>
<listitem>
<para>An “<tag>E</tag>” element who's parent is “<tag>P</tag>”</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>P + E</literal></term>
<listitem>
<para>An “<tag>E</tag>” element immediately preceded by a “<tag>P</tag>”</para>
</listitem>
</varlistentry>
</variablelist>
</foil>

<foil>
<title>CSS Selectors (continued)</title>
<variablelist>
<varlistentry><term><literal>P ~ E</literal></term>
<listitem>
<para>An “<tag>E</tag>” element preceded by a “<tag>P</tag>”</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>E[a]</literal></term>
<listitem>
<para>An “<tag>E</tag>” element with an “<tag class="attribute">a</tag>” attribute.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>E[a="val"]</literal></term>
<listitem>
<para>An “<tag>E</tag>” element with an “<tag class="attribute">a</tag>” attribute whose
value is exactly “<literal>val</literal>”. (<foreignphrase>c.f.</foreignphrase>
<literal>~=</literal>, <literal>^=</literal>, <literal>$=</literal>, <literal>*=</literal>,
and <literal>|=</literal>)</para>
</listitem>
</varlistentry>
</variablelist>
</foil>

<foil>
<title>CSS Selectors (continued)</title>
<variablelist>
<varlistentry><term><literal>E:first-child</literal></term>
<listitem>
<para>An “<tag>E</tag>” element that is the first child of its parent
(<foreignphrase>c.f.</foreignphrase> <literal>:last-child</literal>, <literal>:first-of-type</literal>,
<literal>:last-of-type</literal>, <literal>:only-child</literal>, and <literal>:only-of-type</literal>)
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>E:first-letter</literal></term>
<listitem>
<para>The first (formatted) letter of an “<tag>E</tag>” element</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>E:first-line</literal></term>
<listitem>
<para>The first (formatted) line of an “<tag>E</tag>” element</para>
</listitem>
</varlistentry>
</variablelist>
</foil>

<foil>
<title>CSS Selectors (continued)</title>
<variablelist>
<varlistentry><term><literal>E:empty</literal></term>
<listitem>
<para>An “<tag>E</tag>” element that is empty</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>E:link</literal> (<literal>E:visited</literal>)</term>
<listitem>
<para>An “<tag>E</tag>” element that is a link that has not (has) been visited</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>E:active</literal></term>
<listitem>
<para>An “<tag>E</tag>” element that is active (in a user action)
(<foreignphrase>c.f.</foreignphrase> <literal>:hover</literal>, <literal>:focus</literal>,
<literal>:enabled</literal>, <literal>:disabled</literal>, and <literal>checked:</literal>)
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>E:not(S)</literal></term>
<listitem>
<para>An “<tag>E</tag>” element that does not match the
<emphasis>simple</emphasis> selector “<literal>S</literal>”</para>
</listitem>
</varlistentry>
</variablelist>
</foil>

<foil>
<title>CSS media queries</title>

<itemizedlist>
<listitem>
<para>In the modern world, are desktop and laptop machines, tablets, and mobile phones are
all popular devices for accessing the internet. These have quite different aspect ratios
and resolutions.</para>
</listitem>
<listitem>
<para>Designing for any one of those platforms is often straightforward. But creating
a single design that works equally well on all those devices is exceedingly hard.</para>
</listitem>
<listitem>
<para>What we need is a way of selecting the appropriate design based on the device.</para>
</listitem>
<listitem>
<para>Enter media queries.</para>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>CSS media query examples</title>

<para>Select the appropriate stylesheet:</para>

<programlisting language="html"><![CDATA[<link rel="stylesheet" href="base.css"/>
<link rel="stylesheet" href="color.css"
      media="screen and (color)"/>
<link rel="stylesheet" href="print.css"
      media="print"/>
<link rel="stylesheet" href="phone.css"
      media="(max-width: 400px)"/>
<link rel="stylesheet" href="landscape.css"
      media="handheld and (orientation:landscape)"/>]]></programlisting>

<para>Or select the appropriate rule:</para>

<programlisting language="css">
@media screen and (device-aspect-ratio: 16/9) {
  /* 16x9 device rules */
}</programlisting>
</foil>

</foilgroup>

<foil>
<title>Q&amp;A</title>
<para condition="web">Thanks!</para>
</foil>
<foilgroup>
<title>JavaScript</title>

<foil>
<title>JavaScript</title>

<itemizedlist>
<listitem>
<para>JavaScript is the defacto standard programming language for web
applications; browsers expose significant JavaScript APIs (<foreignphrase>n.b.</foreignphrase>: it is
also popular in other contexts)</para>
</listitem>
<listitem>
<para>Although it started as a slow, limited, odd little language, it has grown into a quite
substantial and robust (if still a bit odd) language supported on some very fast virtual
machines</para>
</listitem>
<listitem>
<para>Technically, it is an object-oriented language that uses prototypes; it is a dynamic language
with first-class and nested functions supporting closures</para>
</listitem>
<listitem>
<para>JavaScript utilizes (or supports) a mixture of object-oriented, imperative, and functional
programming styles</para>
</listitem>
<listitem>
<para>Syntactically, it's from the C/Java school</para>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>JavaScript Syntax</title>

<para>In lieu of several hours of JavaScript instruction…some examples</para>

<programlisting language="javascript">/* comment */
return 3+4;

var x = 3;
var y = 4;
return x+y // 7, in case you weren't sure

function f(n) {
  var total = 0; // local variable
  total += n;
  return total;
}
</programlisting>
</foil>

<foil>
<title>JavaScript Syntax (continued)</title>
<programlisting language="javascript">// More examples

var produce = { "apple":      { "color": "red",
                                "fruit": true },
                "plum":       { "color": "purple",
                                "fruit": true },
                "strawberry": { "color": "red",
                                "fruit": false } };

produce["plum"]["color"] // "purple"
produce.strawberry.fruit // false

return obj.b().c()
</programlisting>
</foil>

<foil>
<title>JavaScript and CSS</title>

<para>Combining JavaScript and CSS makes interactive applications easy and efficient.</para>

<itemizedlist>
<listitem>
<para>Respond to events (user input, mouse motion, server actions)</para>
</listitem>
<listitem>
<para>Locate HTML elements in the browser</para>
</listitem>
<listitem>
<para>Update the CSS associated with those elements (highlight, hide, show, move, resize, etc.)</para>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>JavaScript and AJAX</title>

<para>One of the things that reinvigorated interest in JavaScript a few years ago
was the (re)discovery of AJAX: “Asynchronous JavaScript and XML”.</para>

<itemizedlist>
<listitem>
<para>JavaScript running in the browser send an HTTP request to a server.</para>
</listitem>
<listitem>
<para>It establishes a callback function for the result and returns control to the browser.</para>
</listitem>
<listitem>
<para>When the server responds, the callback function is automatically called</para>
</listitem>
<listitem>
<para>This leads to fast, dynamic applications</para>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>JavaScript and JSON</title>

<para>Many AJAX services these days use JSON instead of XML:</para>

<programlisting language="javascript">{
    "name": {
        "first": "John",
        "last": "Smith"
    },
    "age": 45,
    "phones": [
        "+1-413-555-1212",
        "+44-1603633522"
    ]
}</programlisting>

<itemizedlist>
<listitem>
<para>JSON encodes simple data values: objects (hash tables), arrays, numbers, strings, boolean “true”,
boolean “false”, and “null”.</para>
</listitem>
<listitem>
<para>Objects and arrays can be nested</para>
</listitem>
<listitem>
<para>This syntax fits naturally into the JavaScript programming language</para>
</listitem>
<listitem>
<para>JSON offers <emphasis>no practical</emphasis> way to represent mixed content</para>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>JavaScript Frameworks</title>

<para>JavaScript frameworks offer many advantages:</para>

<itemizedlist>
<listitem>
<para>Conceal browser differences
</para>
</listitem>
<listitem>
<para>Offer APIs more consistent with JavaScript programming
</para>
</listitem>
<listitem>
<para>Provide syntactic conveniences (by using the underlying prototype nature of JavaScript's object
system to extend the language)
</para>
</listitem>
</itemizedlist>

<para>Use a framework.</para>
</foil>

<foil>
<title>Popular JavaScript Frameworks</title>

<itemizedlist>
<listitem>
<para>Dojo</para>
</listitem>
<listitem>
<para>jQuery</para>
</listitem>
<listitem>
<para>MochiKit</para>
</listitem>
<listitem>
<para>Prototype/script.aculo.us</para>
</listitem>
<listitem>
<para>YUI</para>
</listitem>
</itemizedlist>

<para>See <link xlink:href="http://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks">Comparison
of JavaScript frameworks</link>.</para>

<para>In the examples that follow, I'll be using jQuery.</para>
</foil>

<foil>
<title>Unobtrusive JavaScript</title>

<para>The name “unobtrusive javascript” is a label for a set of best practices.</para>

<itemizedlist>
<listitem>
<para>Keep your JavaScript out of your HTML.</para>
</listitem>
<listitem>
<para>Fail gracefully.</para>
</listitem>
<listitem>
<para>Don't interfere with accessibility: deliver useful information
even in the face of missing or failing JavaScript.</para>
</listitem>
</itemizedlist>

<para>Let's consider an example…</para>
</foil>

<foil>
<title>Unobtrusive Example</title>

<para>The name “unobtrusive javascript” is a label for a set of best practices.</para>

<programlisting language="xml"><xi:include href="ex/unobtrusive.xml" parse="text"/></programlisting>

<itemizedlist>
<title>Be unobtrusive</title>
<listitem>
<para>Keep your JavaScript out of your HTML.</para>
</listitem>
<listitem>
<para>Fail gracefully.</para>
</listitem>
<listitem>
<para>Don't interfere with accessibility.</para>
</listitem>
</itemizedlist>
</foil>

<foil condition="web">
<title>Unobtrusive Example (continued)</title>

<para>The name “unobtrusive javascript” is a label for a set of best practices.</para>

<itemizedlist role="details">
<title>Be unobtrusive</title>
<listitem>
<para>Keep your JavaScript out of your HTML.</para>
</listitem>
<listitem>
<para>Fail gracefully.</para>
</listitem>
<listitem>
<para>Don't interfere with accessibility.</para>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>Unobtrusive Example Explained 1/4</title>

<para>HTML:</para>

<programlisting language="html"><![CDATA[<head>
  ...
  <script type="text/javascript"
          src="js/jquery-1.6.2.min.js"></script>
  <script type="text/javascript"
          src="js/webtech.js"></script>
</head>]]></programlisting>
</foil>

<foil>
<title>Unobtrusive Example Explained 2/4</title>

<para>JavaScript:</para>

<programlisting language="javascript">$(document).ready(function(){
    beUnobtrusive();
});

function beUnobtrusive() {
    // If we get here, we have JavaScript and JQuery. Duh.
    $("div.details").each(processDetails);
}

function processDetails() {
    $(this).children("div").each(processDiv);
}

function processDiv() {
    $(this).css("font-weight", "bold")
        .addClass("toggleClosed")
        .click(toggleList);
}

function toggleList() {
    $(this).toggleClass("toggleClosed")
        .toggleClass("toggleOpen");
}</programlisting>
</foil>

<foil>
<title>Unobtrusive Example Explained 3/4</title>

<para>CSS:</para>

<programlisting language="css">.toggleClosed:before {
    content: "\25B6 ";
}

.toggleOpen:before {
    content: "\25BC ";
}

.toggleClosed ~ ul {
    display: none;
}</programlisting>
</foil>

<foil>
<title>Unobtrusive Example Explained 4/4</title>

<para>Alternate JavaScript:</para>

<programlisting language="javascript">function beUnobtrusive() {
    // If we get here, we have JavaScript and JQuery. Duh.
    $("div.details").each(function() {
        $(this).children("div").each(function () {
            $(this).css("font-weight", "bold")
                .addClass("toggleClosed");
            $(this).click(function() {
                $(this).toggleClass("toggleClosed")
                    .toggleClass("toggleOpen");
            });
        });
    });
}</programlisting>
</foil>

<!-- ============================================================ -->

<foil condition="web">
<title>Alternate Example</title>
<programlisting language="xml"><xi:include href="ex/details.xml" parse="text"/></programlisting>
<xi:include href="ex/details.xml"/>
</foil>

<!-- ============================================================ -->

<foil condition="web">
<title>Progressive enhancement</title>
<para>Remember our birthday example?</para>
<programlisting language="xml"><xi:include href="ex/birthday.xml" parse="text"/></programlisting>
<para>Try it out:</para>
<xi:include href="ex/birthday.xml"/>
<para xml:id="datetest"></para>
</foil>

<!--
<foil>
<title>Progressive enhancement</title>
<para>Remember our birthday example?</para>
<programlisting language="xml"><xi:include href="ex/birthday.xml" parse="text"/></programlisting>
<para>Try it out:</para>
<xi:include href="ex/birthday.xml"/>
<para xml:id="datetest"></para>
</foil>
-->

<!-- ============================================================ -->

<foil>
<title>Progressive enhancement: How?</title>

<programlisting language="html"><![CDATA[<head>
  ...
  <link type="text/css"
        href="css/ui/jquery-ui-1.8.16.css"
        rel="stylesheet" />
  <script type="text/javascript"
          src="js/jquery-ui-1.8.16.min.js"></script>
  <script type="text/javascript"
          src="js/webtech.js"></script>
</head>]]></programlisting>

<para><filename>js/webtech.js:</filename></para>

<programlisting language="javascript"><![CDATA[$(document).ready(function(){
    var datetest = document.createElement("input");
    datetest.setAttribute("type", "date");
    if (datetest.type == "text") {
        // This browser doesn't support the date type
        $("#birthday").datepicker(
          { dateFormat: "yy-mm-dd" }
        );
    }
});]]></programlisting>
</foil>

<foil>
<title>“Modernizing” Toolkits</title>

<itemizedlist>
<listitem>
<para>Supporting the date input type was a good example of progressive enhancement, but
in reality you don't have to code it yourself.</para>
</listitem>
<listitem>
<para>There are toolkits for exactly this purpose.
</para>
<itemizedlist>
<listitem>
<para><link xlink:href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills">HTML5
Cross Browser Polyfills</link>
</para>
</listitem>
<listitem>
<para><link xlink:href="http://www.modernizr.com/">Modernizr</link>
</para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>JavaScript APIs</title>
<itemizedlist>
<listitem>
<para><link xlink:href="http://www.w3.org/TR/geolocation-API/">Geolocation</link></para>
</listitem>
<listitem>
<para><link xlink:href="http://www.w3.org/TR/webstorage/">Web Storage</link></para>
</listitem>
<listitem>
<para><link xlink:href="http://www.w3.org/TR/widgets-apis/">Widget Interface</link></para>
</listitem>
<listitem>
<para><link xlink:href="http://www.w3.org/TR/battery-status/">Battery Status</link></para>
</listitem>
<listitem>
<para><link xlink:href="http://www.w3.org/TR/vibration/">Vibration</link></para>
</listitem>
<listitem>
<para><link xlink:href="http://www.w3.org/TR/workers/">Web Workers</link></para>
</listitem>
<listitem>
<para>User, resource, and high-resolution timing.</para>
</listitem>
<listitem>
<para>Etc., etc., etc.</para>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>Geolocation API</title>
<itemizedlist>
<listitem>
<para>The
<link xlink:href="http://dev.w3.org/geo/api/spec-source.html">Geolocation API</link> is
part of HTML5 and answers the question “where are you?”</para>
</listitem>
<listitem>
<para>Many mobile devices have a GPS. Desktop and laptop browsers may be able to use other
mechanisms (IP address, nearby wifi access points)</para>
</listitem>
<listitem>
<para>Recent browsers support the standard, older browsers may have proprietary APIs.
</para>
</listitem>
<listitem>
<para>Getting a users geolocation requires their consent.</para>
</listitem>
</itemizedlist>
</foil>

<!-- ============================================================ -->

<foil condition="web">
<title>Welcome to Oxford</title>
<para xml:id="whereareyou">Where are you?
<h:input type="button" id="updateMap" value="Update location"/></para>
<xi:include href="ex/oxfordmap.xml"/>
</foil>

<foil>
<title>Geolocation API</title>
<programlisting language="javascript"><xi:include href="ex/geo.js" parse="text"/></programlisting>
</foil>

<!-- ============================================================ -->

<foil>
<title>Local storage</title>

<itemizedlist>
<listitem>
<para>HTML5 <link xlink:href="http://dev.w3.org/html5/webstorage/">Web Storage</link> is
a simple API for storing data locally</para>
</listitem>
<listitem>
<para>Think about applications that you might want to run when you're disconnected.
</para>
</listitem>
<listitem>
<para>If they can store data locally, they may be able to restart without a net connection.
</para>
</listitem>
</itemizedlist>
</foil>

<foil>
<title>Local storage API</title>

<para>There are just three things to know:</para>

<itemizedlist>
<listitem>
<para>Missing API: <code>typeof localStorage === "undefined"</code>
</para>
</listitem>
<listitem>
<para>Save a value: <code>localStorage.setItem("key", value)</code>
</para>
</listitem>
<listitem>
<para>Retrieve a value: <code>localStorage.getItem("key")</code>
</para>
</listitem>
</itemizedlist>
<para>It is possible to run out of storage, so some error checking is also in order.</para>
</foil>

<foil>
<title>What about my code?</title>

<para>Local storage of data is fine, but how do I save my HTML, JavaScript, CSS, images,
and other files locally?</para>

<orderedlist>
<listitem>
<para>Add a manifest to your <tag>html</tag> element:</para>
<programlisting language="xml"><![CDATA[<html manifest="myapp.appcache">
   ...]]></programlisting>
</listitem>
<listitem>
<para>Create a manifest file, <filename>myapp.appcache</filename> listing the
files that you want to have cached locally:</para>
<programlisting>CACHE MANIFEST
app.html
app.js
app.css
images/banner.png</programlisting>
</listitem>
<listitem>
<para>Make sure that the manifest is served with the media type
“<code>text/cache-manifest</code>”.
</para>
</listitem>
</orderedlist>
</foil>

</foilgroup>

<foil>
<title>Q&amp;A</title>
<para condition="web">Thanks!</para>
</foil>
  <foilgroup>
    <title>What does an Annotation do?</title>
    <foil>
      <title>Annotating a line of dialogue</title>
      <para>Let's assume that Users (scholars, enthusiasts) want to add annotations to individual lines of dialogue in the play.</para>
    </foil>
    <foil>
      <title>Locating lines of dialogue within the HTML</title>
      <itemizedlist>
        <listitem><para>Regularity of the source markup</para></listitem>
        <listitem><para>Consistent structures</para></listitem>
        <listitem><para>IDs</para></listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>A quick introduction to jQuery &amp; the Web Inspector</title>
      <para>DEMOTIME</para>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Adding a form for Annotations in the body of the Act HTML</title>
    <foil>
      <title>Building form HTML in Javascript</title>
      <para>jQuery has a set of DOM manipulation functions</para>
      <para>http://api.jquery.com/category/manipulation/</para>
    </foil>
    <foil>
      <title>Inserting chunks of HTML</title>
      <para>Create new HTML from a string and append it to an element with id <code>id</code></para>
      <programlisting language="javascript"><![CDATA[$('#id').append('<p>Hello World</p>');]]></programlisting>
      <para>Create new HTML, store it, them append it.</para>
      <programlisting language="javascript"><![CDATA[var hello_html = $('<p>Hello World</p>');
$('#id').append(hello_html);]]></programlisting>

    </foil>
    <foil>
      <title>Building the form HTML</title>
      <programlisting lanuguage="javascript"><xi:include href="ex/annotation-form-fragment.js" parse="text"/></programlisting>
    </foil>
    <foil>
      <title>Inserting the form into every line of dialogue</title>
      <para>Our XSLT renders the dialogue like this:</para>
      <programlisting language="html"><![CDATA[
<div class="sp" id="idm150112">
  <div class="speaker italic" id="idm149856">
Flauius.</div>
  <div class="ab" id="idm149248">Hence: home you idle 
Creatures, get you home:<br/>Is this a Holiday? What, 
know you not<br/>(Being Mechanicall) you ought not 
walke<br/>Vpon a labouring day, without the signe<br/>
Of your Profession? Speake, what Trade art thou?<br/>
  </div>
</div>
]]>
      </programlisting>
    </foil>
    <foil>
      <title>Inserting the form into every line of dialogue</title>
      <programlisting language="javascript"><![CDATA[
$('div.sp').each(function() {
  var line_node = $(this);
  var form_node = $(form).appendTo(line_node);
  form_node.find(
    "input[name='annotation[id]']"
  ).val(this.id);
});]]>
      </programlisting>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>The Annotation object</title>
    <foil>
      <title>Modelling Annotations</title>
      <itemizedlist>
        <listitem><para>Annotation text</para></listitem>
        <listitem><para>ID for the annotated thing</para></listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>Implementation</title>
      <programlisting language="ruby"><xi:include href="ex/annotation-model-basic.rb" parse="text"/></programlisting>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Adding Annotations to the body of the Act HTML</title>
    <foil>
      <title>Getting the annotations to the Browser</title>
      <para>How can we get annotations from the database into the page?</para>
      <itemizedlist>
        <listitem><para>Adding in-place markup?</para></listitem>
        <listitem><para>Adding bulk markup?</para></listitem>
        <listitem><para>Adding javascript.</para></listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>Why not through XML?</title>
      <sidebar><title>What about the source XML?</title></sidebar>
      <para>We could do this, because we have access to the source XML, but...</para>
      <para>It's potentially dangerous (your document file is open for writing), and opens the whole document to potential user manipulation (potential malicious edit).</para>
      <para>Probably you wouldn't have write access.</para>
      <sidebar><title>What about the XSLT?</title></sidebar>
      <para>You may not have access to edit the XSLT, and you'd require native function extension elements.</para>
      <para>It's probably a lot easier to stitch together on the client.</para>
    </foil>
    <foil>
      <title>Building a list of Annotations</title>
      <para>We can just write a javascript array containing the data we need about each annotation into the page.</para>
      <programlisting language="javascript"><![CDATA[
var annotations = [
  ['id12345', {text: 'Annotation text'}],
  ['id67890', {text: 'Other annotation text'}],
  ['id67890', {text: 'Last annotation text'}],
];]]></programlisting>
    </foil>
    <foil>
      <title>JSON is just Javascript</title>
      <para>The JSON data serialisation format is a perfect fit here.</para>
      <para>JavaScript Object Notation uses the literal notation for Javascript.</para>
      <para>So, the previous page's array literal is also valid JSON.</para>
    </foil>
    <foil>
      <title>Inserting the Annotations</title>
      <para>What if we could just create the Annotations array like this?</para>
      <programlisting language="js+erb"><![CDATA[
  var annotations = <%= @annotations.to_json %>;
]]></programlisting>
      <para>Let's make that possible.</para>
      <programlisting language="ruby"><![CDATA[
require 'json'

class Annotation
  def to_json(opts = {})
    [
      act_uid, 
      {'text' => text, 'author' => user.name}
    ].to_json(opts)
  end
end]]></programlisting>
      <para><code>lib/show.erb</code></para>
    </foil>
    <foil>
      <title>Inserting the Annotations</title>
      <para>We need a template annotation we can clone and populate.</para>
      <programlisting language="javascript"><![CDATA[
// container for all annotations of a line
var annotations_html = '<div class="annotations"></div>';
// container for an individual annotation
var annotation_html = '<div class="annotation">'
  + '  <p></p>'
  + '  <p class="author"></p>'
  + '</div>';]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>Inserting the Annotations</title>
      <para>Now we need to clone and populate it.</para>
      <programlisting language="js+erb"><![CDATA[
var annotations = <%= @annotations.to_json %>;
$(document).ready(function() {
  $.each(annotations, function(i, annotation) {
    id = annotation[0]; data = annotation[1];
    var annotated_node = $('#' + id);
    if (annotated_node.length) {
      if (annotated_node.find('.annotations').length) {
        annotated_node.append(annotations_html);
      }
      var annotation_node = $(annotation_html);
      annotation_node.find('p:first').text(data.text);
      annotation_node.find('p.author').text(data.author);
      annotated_node.find('.annotations').append(
        annotation_node
      );
    }
  });
});]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Processing the form POST</title>
    <foil>
      <title>Processing the form POST</title>
      <programlisting lanugage="ruby"><![CDATA[
post '/plays/:id/act/:act_number/annotations' do
  halt 403 unless current_user
  @play = Play.find(params[:id])
  @act = @play.act(params[:act_number])
  attrs = params['annotation']
  annotation = current_user.annotations.create!(
    :text => attrs['text'], :act_uid => @act.uid,
    :annotated_id => attrs['id'])
  redirect to("/plays/#{@play.slug}/act/#{@act.number}")
end
]]></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Adding Annotations without reloading the page</title>
    <foil>
      <title>Hijacking the form</title>
      <para>The classic 'Ajax' app-like behaviour is to submit or retrieve data from the server without triggering a page refresh.</para>
      <para>First, we need to intercept the form's <code>submit</code> event.</para>
      <para>Because we have a variable number of forms on the page, let's intercept them all and rely on local context to deal with them correctly.</para>:w
      <programlisting language="js"><![CDATA[
$('.sp form').submit(function(e) {
  window.alert($(this).serialize());
});
]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>Preventing it submitting anyway</title>
      <para>You'll have noticed that the alert message appeared and then the normal form submission process resumed. Let's stop that happening.</para>
      <programlisting language="js"><![CDATA[
$('.sp form').submit(function(e) {
  e.preventDefault();
  window.alert($(this).serialize());
});
]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>POSTing</title>
      <para>Now let's actually submit the data, using jQuery's Ajax convenience functions.</para>
      <programlisting language="js"><![CDATA[
$('.sp form').submit(function(e) {
  e.preventDefault();
  $.post(this.action, $(this).serialize());
});
]]></programlisting>
      <para><code>views/show.erb</code></para>
      <para>Better, but now there's no immediate evidence we did anything.</para>
    </foil>
    <foil>
      <title>The success callback</title>
      <para>jQuery's <code>$.post()</code> function can also take a function as an argument, and the function will called if the POST request succeeds.</para>
      <programlisting language="js"><![CDATA[
$('.sp form').submit(function(e) {
  e.preventDefault();
  var line_node = $(this).parents('.sp');
  $.post(this.action, $(this).serialize(), 
    function(data, text_status, jq_xhr) {
    if (line_node.find('.annotations').length == 0) {
      line_node.append(annotations_html);
    }
    var annotation_node = $(annotation_html);
    annotated_node.find('.annotations').append(annotation_node);
    console.log(data);
  });
});
]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>Choosing the response format</title>
      <para>Oh dear, we're being sent the redirect response when what we really want is one of those JSON annotation lines... We'd better return that instead of all the HTML when we submit the Ajax request.</para>
      <programlisting language="ruby"><![CDATA[
post '/plays/:id/act/:act_number/annotations' do
  ...
  if request.xhr?
    return [
      201, 
      {'Content-Type' => 'application/json'}, 
      annotation.to_json
    ]
  end
  redirect to("/plays/#{@play.slug}/act/#{@act.number}")
end
]]></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
      <programlisting language="js"><![CDATA[
$.post(this.action, $(this).serialize(), 
  function(data, text_status, jq_xhr) {
  ...
  var annotation_node = $(annotation_html);
  var annotation = data[1];
  annotation_node.find('p:first').text(annotation.text);
  annotation_node.find('p.author').text(annotation.author);
  annotated_node.find('.annotations').append(
    annotation_node
  );
});
]]></programlisting>
    </foil>
    <foil>
      <title><code>request.xhr?</code></title>
      <para>When an Ajax request gets made, it sends an HTTP header to the server which allows it to be identified as an Ajax request.</para>
      <para><code>request.xhr?</code> makes use of that to give you a true/false value answer to the is-this-an-Ajax-request question.</para>
      <para>It's not always reliable, and often you want to respond in that way (201 not 302) to other requests, especially APIish ones. It would be nice if the requestor could ask for <code>application/json</code> or <code>text/plain</code> (or whatever) to make an explicit request for a certain kind of response.</para>
    </foil>
    <foil>
      <title>Content Negotiation</title>
      <para>The browser sends the <code>Accept</code> header listing content-types it wants:</para>
      <programlisting language="http">Accept: application/json</programlisting>
      <para>The server can use that information to tailor the response.</para>
      <para>The other common approach is to use .extensions as an explicit format request:</para>
      <programlisting language="text">/path/to/resource.html
/path/to/resource.json</programlisting>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Showing and hiding annotations on demand</title>
    <foil>
      <title>Showing and hiding the form</title>
      <programlisting language="javascript"><![CDATA[
var controls = '<p class="annotation controls">'
  + '<a href="#add" class="add">+</a></p>';
var controls_node = $(controls).prependTo(line_node);
controls_node.find('.add').click(function() {
  controls_node.find('.add').click(function() { 
    annotation_form_node.show() 
  });
});
$.post(this.action, $(this).serialize(), 
  function(data, text_status, jq_xhr) {
  ...
  $(this).hide();
});
]]></programlisting>
    </foil>
    <foil>
      <title>Toggling the annotations</title>
      <programlisting language="javascript"><![CDATA[
var controls = '<p class="annotation controls">'
  + '<a href="#show" class="show">Show</a>'
  + ' | <a href="#add" class="add">+</a></p>';
...
controls_node.find('.show').click(function() {
  var annotations_node = annotated_node.find(
    '.annotations'
  );
  annotations_node.toggle();
  if (annotations_node.is(':visible')) {
    $(this).text('Hide');
  }
  else { $(this).text('Show'); }
});
]]>
      </programlisting>
    </foil>
    <foil>
      <title>Where does the state live?</title>
      <para>We're just trusting the DOM to give us enough context to infer UI state: it's being stored implicitly. There's nothing explicit that would allow us to reconstruct the state of the UI (e.g. which annotations are currently shown) on a page refresh.</para>
      <para>For more complex UI we'd probably want to start using things like adding and removing CSS classes from elements to explicitly indicate state. For even more complex stuff we'd probably want to look at Javascript application framework libraries like Backbone.js or Ember.js.</para>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Unobtrusively indicating the presence of annotations</title>
    <foil>
      <title>CSS manipulation</title>
      <para>Currently we have no way to see which lines have annotations. Let's apply a highlight to those lines that have annotations.</para>
      <programlisting language="js"><![CDATA[
$('.sp').has('.annotations').each(function() {
  $(this).css('background-color', 'rgb(249,240,158)');
});
]]></programlisting>
    </foil>
    <foil>
      <title>Multiple triggers</title>
      <para>What about once we've added an annotation?</para>
      <para>Why don't we think in terms of an <code>annotated</code> event which is fired whenever a line gets annotated.</para>
      <programlisting language="js"><![CDATA[
$('.sp').bind('annotated', function() {
  $(this).css('background-color', 'rgb(249,240,158)');
});
$('.sp').has('.annotations').each(function() {
  $(this).trigger('annotated');
});
$.post(this.action, $(this).serialize(), 
  function(data, text_status, jq_xhr) {
  ...
  annotated_node.trigger('annotated');
});
]]></programlisting>
    </foil>
  </foilgroup>
</slides>
  
