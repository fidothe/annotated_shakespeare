<?dbhtml pygments="true"?>
<slides xml:lang="en" xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>Practical Web Applications</title>
    <subtitle>Session Six</subtitle>
    <!-- authors are alphabetical by first name (I get sick of being listed last all the time, 
so I always do this if I can) -->
    <authorgroup>
      <author>
        <personname>
          <firstname>Lauren</firstname>
          <surname>Wood</surname>
        </personname>
        <affiliation>
          <orgname>Textuality Services, Inc.</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Matt</firstname>
          <surname>Patterson</surname>
        </personname>
        <affiliation>
          <orgname>Constituent Parts, Ltd.</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Norman </firstname>
          <surname>Walsh</surname>
        </personname>
        <affiliation>
          <orgname>MarkLogic</orgname>
        </affiliation>
      </author>
      <author>
        <personname>
          <firstname>Paul</firstname>
          <surname>Downey</surname>
        </personname>
        <affiliation>
          <orgname>GDS</orgname>
        </affiliation>
      </author>
    </authorgroup>
    <releaseinfo role="version">Version 1.0</releaseinfo>
    <legalnotice>
      <para>Alpha by first name</para>
    </legalnotice>
    <pubdate>2012-09-20</pubdate>
    <copyright>
      <year>2012</year>
      <holder>Lauren Wood, Matt Patterson, Norm Walsh, Paul Downey</holder>
    </copyright>
  </info>
  <foilgroup>
    <title>What does an Annotation do?</title>
    <foil>
      <title>Annotating a line of dialogue</title>
      <para>Let's assume that Users (scholars, enthusiasts) want to add annotations to individual lines of dialogue in the play.</para>
    </foil>
    <foil>
      <title>Locating lines of dialogue within the HTML</title>
      <itemizedlist>
        <listitem><para>Regularity of the source markup</para></listitem>
        <listitem><para>Consistent structures</para></listitem>
        <listitem><para>IDs</para></listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>A quick introduction to jQuery &amp; the Web Inspector</title>
      <para>DEMOTIME</para>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Adding a form for Annotations in the body of the Act HTML</title>
    <foil>
      <title>Building form HTML in Javascript</title>
      <para>jQuery has a set of DOM manipulation functions</para>
      <para>http://api.jquery.com/category/manipulation/</para>
    </foil>
    <foil>
      <title>Inserting chunks of HTML</title>
      <para>Create new HTML from a string and append it to an element with id <code>id</code></para>
      <programlisting language="javascript"><![CDATA[$('#id').append('<p>Hello World</p>');]]></programlisting>
      <para>Create new HTML, store it, them append it.</para>
      <programlisting language="javascript"><![CDATA[var hello_html = $('<p>Hello World</p>');
$('#id').append(hello_html);]]></programlisting>

    </foil>
    <foil>
      <title>Building the form HTML</title>
      <programlisting lanuguage="javascript"><xi:include href="ex/annotation-form-fragment.js" parse="text"/></programlisting>
    </foil>
    <foil>
      <title>Inserting the form into every line of dialogue</title>
      <para>Our XSLT renders the dialogue like this:</para>
      <programlisting language="html"><![CDATA[
<div class="sp" id="idm150112">
  <div class="speaker italic" id="idm149856">
Flauius.</div>
  <div class="ab" id="idm149248">Hence: home you idle 
Creatures, get you home:<br/>Is this a Holiday? What, 
know you not<br/>(Being Mechanicall) you ought not 
walke<br/>Vpon a labouring day, without the signe<br/>
Of your Profession? Speake, what Trade art thou?<br/>
  </div>
</div>
]]>
      </programlisting>
    </foil>
    <foil>
      <title>Inserting the form into every line of dialogue</title>
      <programlisting language="javascript"><![CDATA[
$('div.sp').each(function() {
  var line_node = $(this);
  var form_node = $(form).appendTo(line_node);
  form_node.find(
    "input[name='annotation[id]']"
  ).val(this.id);
});]]>
      </programlisting>
    </foil>
    <foil>
      <title>Showing and hiding the form</title>
      <programlisting language="javascript"><![CDATA[
var controls = '<p class="annotation controls">'
  + '<a href="#show" class="show">Hide</a></p>';
var controls_node = $(controls).prependTo(line_node);
controls_node.find('.show').toggle(
  function() { 
    annotated_node.find('.annotations').show();
    $(this).text('Hide');
  }, 
  function() { 
    annotated_node.find('.annotations').hide(); 
    $(this).text('Show');
  }
);
]]>
      </programlisting>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>The Annotation object</title>
    <foil>
      <title>Modelling Annotations</title>
      <itemizedlist>
        <listitem><para>Annotation text</para></listitem>
        <listitem><para>ID for the annotated thing</para></listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>Implementation</title>
      <programlisting language="ruby"><xi:include href="ex/annotation-model-basic.rb" parse="text"/></programlisting>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Adding Annotations to the body of the Act HTML</title>
    <foil>
      <title>Getting the annotations to the Browser</title>
      <para>How can we get annotations from the database into the page?</para>
      <itemizedlist>
        <listitem><para>Adding in-place markup?</para></listitem>
        <listitem><para>Adding bulk markup?</para></listitem>
        <listitem><para>Adding javascript.</para></listitem>
      </itemizedlist>
    </foil>
    <foil>
      <title>Why not through XML?</title>
      <sidebar><title>What about the source XML?</title></sidebar>
      <para>We could do this, because we have access to the source XML, but...</para>
      <para>It's potentially dangerous (your document file is open for writing), and opens the whole document to potential user manipulation (potential malicious edit).</para>
      <para>Probably you wouldn't have write access.</para>
      <sidebar><title>What about the XSLT?</title></sidebar>
      <para>You may not have access to edit the XSLT, and you'd require native function extension elements.</para>
      <para>It's probably a lot easier to stitch together on the client.</para>
    </foil>
    <foil>
      <title>Building a list of Annotations</title>
      <para>We can just write a javascript array containing the data we need about each annotation into the page.</para>
      <programlisting language="javascript"><![CDATA[
var annotations = [
  ['id12345', {text: 'Annotation text'}],
  ['id67890', {text: 'Other annotation text'}],
  ['id67890', {text: 'Last annotation text'}],
];]]></programlisting>
    </foil>
    <foil>
      <title>JSON is just Javascript</title>
      <para>The JSON data serialisation format is a perfect fit here.</para>
      <para>JavaScript Object Notation uses the literal notation for Javascript.</para>
      <para>So, the previous page's array literal is also valid JSON.</para>
    </foil>
    <foil>
      <title>Inserting the Annotations</title>
      <para>What if we could just create the Annotations array like this?</para>
      <programlisting language="js+erb"><![CDATA[
  var annotations = <%= @annotations.to_json %>;
]]></programlisting>
      <para>Let's make that possible.</para>
      <programlisting language="ruby"><![CDATA[
require 'json'

class Annotation
  def to_json(opts = {})
    [
      act_uid, 
      {'text' => text, 'author' => user.name}
    ].to_json(opts)
  end
end]]></programlisting>
      <para><code>lib/show.erb</code></para>
    </foil>
    <foil>
      <title>Inserting the Annotations</title>
      <para>We need a template annotation we can clone and populate.</para>
      <programlisting language="javascript"><![CDATA[
// container for all annotations of a line
var annotations_html = '<div class="annotations"></div>';
// container for an individual annotation
var annotation_html = '<div class="annotation">'
  + '  <p></p>'
  + '  <p class="author"></p>'
  + '</div>';]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>Inserting the Annotations</title>
      <para>Now we need to clone and populate it.</para>
      <programlisting language="javascript"><![CDATA[
var annotations = <%= @annotations.to_json %>;
$(document).ready(function() {
  $.each(annotations, function(i, annotation) {
    id = annotation[0];
    data = annotation[1];
    var annotated_node = $('#' + id);
    if (annotated_node) {
      if (annotated_node.find('.annotations').length == 0) {
        annotated_node.append(annotations_html);
      }
      var annotation_node = $(annotation_html);
      annotation_node.find('p:first').text(data.text);
      annotation_node.find('p.author').text(data.author);
      annotated_node.find('.annotations').append(annotation_node);
    }
  });
});]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Processing the form POST</title>
    <foil>
      <title>Processing the form POST</title>
      <programlisting lanugage="ruby"><![CDATA[
post '/plays/:id/act/:act_number/annotations' do
  halt 403 unless current_user
  @play = Play.find(params[:id])
  @act = @play.act(params[:act_number])
  attrs = params['annotation']
  annotation = current_user.annotations.create!(
    :text => attrs['text'], :act_uid => @act.uid,
    :annotated_id => attrs['id'])
  redirect to("/plays/#{@play.slug}/act/#{@act.number}")
end
]]></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Adding Annotations without reloading the page</title>
    <foil>
      <title>Hijacking the form</title>
      <para>The classic 'Ajax' app-like behaviour is to submit or retrieve data from the server without triggering a page refresh.</para>
      <para>First, we need to intercept the form's <code>submit</code> event.</para>
      <para>Because we have a variable number of forms on the page, let's intercept them all and rely on local context to deal with them correctly.</para>:w
      <programlisting language="js"><![CDATA[
$('.sp form').submit(function(e) {
  window.alert($(this).serialize());
});
]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>Preventing it submitting anyway</title>
      <para>You'll have noticed that the alert message appeared and then the normal form submission process resumed. Let's stop that happening.</para>
      <programlisting language="js"><![CDATA[
$('.sp form').submit(function(e) {
  e.preventDefault();
  window.alert($(this).serialize());
});
]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>POSTing</title>
      <para>Now let's actually submit the data, using jQuery's Ajax convenience functions.</para>
      <programlisting language="js"><![CDATA[
$('.sp form').submit(function(e) {
  e.preventDefault();
  $.post(this.action, $(this).serialize());
});
]]></programlisting>
      <para><code>views/show.erb</code></para>
      <para>Better, but now there's no immediate evidence we did anything.</para>
    </foil>
    <foil>
      <title>The success callback</title>
      <para>jQuery's <code>$.post()</code> function can also take a function as an argument, and the function will called if the POST request succeeds.</para>
      <programlisting language="js"><![CDATA[
$('.sp form').submit(function(e) {
  e.preventDefault();
  var line_node = $(this).parents('.sp');
  $.post(this.action, $(this).serialize(), function(data, text_status, jq_xhr) {
    if (line_node.find('.annotations').length == 0) {
      line_node.append(annotations_html);
    }
    var annotation_node = $(annotation_html);
    annotated_node.find('.annotations').append(annotation_node);
    console.log(data);
  });
});
]]></programlisting>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>Choosing the response format</title>
      <para>Oh dear, we're being sent the redirect response when what we really want is one of those JSON annotation lines... We'd better return that instead of all the HTML when we submit the Ajax request.</para>
      <programlisting language="ruby"><![CDATA[
post '/plays/:id/act/:act_number/annotations' do
  ...
  return [201, {'Content-Type' => 'application/json'}, annotation.to_json] if request.xhr?
  redirect to("/plays/#{@play.slug}/act/#{@act.number}")
end
]]></programlisting>
      <para><code>lib/annotated_shakespeare.rb</code></para>
      <programlisting language="js"><![CDATA[
$.post(this.action, $(this).serialize(), function(data, text_status, jq_xhr) {
  ...
  var annotation_node = $(annotation_html);
  var annotation = data[1];
  annotation_node.find('p:first').text(annotation.text);
  annotation_node.find('p.author').text(annotation.author);
  annotated_node.find('.annotations').append(annotation_node);
});
]]></programlisting>
    </foil>
    <foil>
      <title><code>request.xhr?</code></title>
      <para>When an Ajax request gets made, it sends an HTTP header to the server which allows it to be identified as an Ajax request.</para>
      <para><code>request.xhr?</code> makes use of that to give you a true/false value answer to the is-this-an-Ajax-request question.</para>
      <para>It's not always reliable, and often you want to respond in that way (201 not 302) to other requests, especially APIish ones. It would be nice if the requestor could ask for <code>application/json</code> or <code>text/plain</code> (or whatever) to make an explicit request for a certain kind of response.</para>
    </foil>
    <foil>
      <title>Content Negotiation</title>
      <para>The browser sends the <code>Accept</code> header listing content-types it wants:</para>
      <programlisting language="http">Accept: application/json</programlisting>
      <para>The server can use that information to tailor the response.</para>
      <para>The other common approach is to use .extensions as an explicit format request:</para>
      <programlisting language="text">/path/to/resource.html
/path/to/resource.json</programlisting>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Showing and hiding annotations on demand</title>
    <foil>
      <title>jQuery show/hide</title>
    </foil>
    <foil>
      <title>Toggling</title>
    </foil>
    <foil>
      <title>Where does the state live?</title>
    </foil>
  </foilgroup>
  <foilgroup>
    <title>Unobtrusively indicating the presence of annotations</title>
    <foil>
      <title>CSS manipulation</title>
    </foil>
    <foil>
      <title>Multiple triggers</title>
    </foil>
    <foil>
      <title>Refactoring the code</title>
      <para><code>views/show.erb</code></para>
    </foil>
    <foil>
      <title>Global namespace pollution</title>
      <para><code>views/show.erb</code></para>
    </foil>
  </foilgroup>
</slides>
